module;

#include "Angaraka/Base.hpp"

export module Angaraka.Core.Resources;

struct TexMetadata;

import Angaraka.Core.Events;

namespace Angaraka::Core {

    // Simple struct to hold raw image data on the CPU side
    // before it's uploaded to the GPU.
    export struct ImageData
    {
        std::unique_ptr<uint8_t[]> Pixels; // Raw pixel data
        size_t Width = 0;
        size_t Height = 0;
        size_t RowPitch = 0;    // Bytes per row
        size_t SlicePitch = 0;  // Bytes per slice (for 3D textures, etc.)
        int Format = 0;         // DXGI_FORMAT as int, to avoid D3D12 headers here
        // Add more metadata if needed (e.g., mip levels, array size)
    };

    /**
     * @brief Base class for all managed resources in the engine.
     *
     * This abstract class provides common interface for all assets
     * that are managed by the ResourceManager.
     */
    export class Resource {
    public:
        /**
         * @brief Virtual destructor to ensure proper cleanup of derived classes.
         */
        virtual ~Resource() = default;

        /**
         * @brief Get the unique identifier (e.g., file path) of the resource.
         * @return A const reference to the resource's identifier string.
         */
        const std::string& GetId() const { return m_id; }

        /**
         * @brief Get the type ID of the resource.
         * @return A static type ID, typically generated by a macro.
         */
        virtual size_t GetTypeId() const = 0;

        /**
         * @brief Pure virtual method for loading the resource data.
         *
         * Derived classes must implement this to perform their specific loading logic.
         * This method should handle parsing file formats and preparing data.
         * @param filePath The path from which to load the resource.
         * @param context Optional context pointer for additional data (e.g., for async loading).
         * @return True if loading was successful, false otherwise.
         */
        virtual bool Load(const std::string& filePath, void* context = nullptr) = 0;

        /**
         * @brief Pure virtual method for unloading/releasing the resource data.
         *
         * Derived classes must implement this to free their allocated memory
         * or release GPU resources.
         */
        virtual void Unload() = 0;

        // Optionally, add a virtual method to prepare for GPU upload,
        // or ensure GPU-specific setup happens in a specialized system.

    protected:
        // Protected constructor to ensure Resource is only created by derived classes.
        explicit Resource(const std::string& id) : m_id(id) {}

    private:
        std::string m_id; // Unique identifier for this resource (e.g., its file path)

    };
}